#!/bin/bash

set -eu

cd "$HOME"

bootstrap_dir=$(dirname "${BASH_SOURCE[0]}")
source "$bootstrap_dir/common_utils"

info_msg "============================"
info_msg "       YADM BOOTSTRAP       "
info_msg "============================"
info_msg ""


if [ "$EUID" -eq 0 ]; then
    error_msg "Don't run this script as root"
    exit 1
fi

info_msg "Checking for sudo command"

if ! command -v sudo &>/dev/null; then
    action_msg "You must install the sudo package before running this script"
    exit 1
fi

info_msg "Checking pacman.conf"
pacman_conf_src="$bootstrap_dir/sys/pacman.conf"
pacman_conf_dest="/etc/pacman.conf"

if ! [ -f "$pacman_conf_dest" ]; then
    action_msg "Copying missing pacman.conf"
    sudo cp "$pacman_conf_src" "$pacman_conf_dest"
elif ! cmp -s "$pacman_conf_src" "$pacman_conf_dest"; then
    prompt "Replace current pacman.conf? [Y/n]"

    if ! [[ $prompt_result == [nN] ]]; then
        prompt "Backup current pacman.conf? [y/N]"

        if [[ $prompt_result == [yY] ]]; then
            action_msg "Moving $pacman_conf_dest to ${pacman_conf_dest}.bak"
            sudo mv "$pacman_conf_dest" "${pacman_conf_dest}.bak"
        fi

        action_msg "Replacing pacman.conf"
        sudo cp "$pacman_conf_src" "$pacman_conf_dest"
    fi
fi

info_msg "Checking mkinitcpio.conf"
mkinitcpio_conf_src="$bootstrap_dir/sys/mkinitcpio.conf"
mkinitcpio_conf_dest="/etc/mkinitcpio.conf"
run_mkinitcpio=false

if ! [ -f "$mkinitcpio_conf_dest" ]; then
    action_msg "Copying missing mkinitcpio.conf"
    sudo cp "$mkinitcpio_conf_src" "$mkinitcpio_conf_dest"
    run_mkinitcpio=true
elif ! cmp -s "$mkinitcpio_conf_src" "$mkinitcpio_conf_dest"; then
    prompt "Replace current mkinitcpio.conf? [Y/n]"

    if ! [[ $prompt_result == [nN] ]]; then
        prompt "Backup current mkinitcpio.conf? [y/N]"

        if [[ $prompt_result == [yY] ]]; then
            action_msg "Moving $mkinitcpio_conf_dest to ${dest}.bak"
            sudo mv "$mkinitcpio_conf_dest" "${dest}.bak"
        fi

        action_msg "Replacing mkinitcpio.conf"
        sudo cp "$mkinitcpio_conf_src" "$mkinitcpio_conf_dest"
        run_mkinitcpio=true
    fi
fi

info_msg "Checking vconsole.conf"
vconsole_dest="/etc/vconsole.conf"

if ! [ -f "$vconsole_dest" ]; then
    prompt "Console font: [ter-v16b]"
    vconsole_font=${prompt_result:-"ter-v16b"}

    prompt "Console keymap: [us]"
    vconsole_keymap=${prompt_result:-"us"}

    action_msg "Adding vconsole.conf with FONT=$vconsole_font and KEYMAP=$vconsole_keymap"

    vconsole=$(cat "$bootstrap_dir/sys/vconsole.conf")
    vconsole=${vconsole//"%font%"/"$vconsole_font"}
    vconsole=${vconsole//"%keymap%"/"$vconsole_keymap"}
    echo "$vconsole" | sudo tee "$vconsole_dest" > /dev/null
fi

info_msg "Checking modprobe.d entries"
modprobe_src="$bootstrap_dir/sys/modprobe.d"
modprobe_dest="/etc/modprobe.d"

for full_path in "$modprobe_src"/*; do
    filename=$(basename "$full_path")

    if ! [ -f "$modprobe_dest/$filename" ]; then
        action_msg "Adding $filename"
        sudo cp "$full_path" "$modprobe_dest/$filename"
    fi
done

action_msg "Initializing yadm submodules"
yadm submodule update --recursive --init

action_msg "Installing needed pacman packages"
sudo pacman --needed -Syu $(cat "$bootstrap_dir/pacman_pkglist")


info_msg "Checking default shell"
if ! [ -n "$($SHELL -c 'echo $ZSH_VERSION')" ]; then
    action_msg "Setting Zsh as the default shell"
    chsh -s $(which zsh)
fi

action_msg "Syncing pkgfile database"
sudo pkgfile -u

info_msg "Checking for Yay"
if ! command -v yay &>/dev/null; then
    action_msg "Installing Yay"
    git clone https://aur.archlinux.org/yay-bin.git
    cd yay-bin
    makepkg -si
    cd ..
    sudo rm -r yay-bin

    action_msg "Generating development package database"
    yay -Y --gendb
    action_msg "Enabling development package updates"
    yay -Y --devel --save
fi

action_msg "Refreshing Yay database"
yay -Sy

action_msg "Installing needed Yay packages"
yay --needed -S $(cat $bootstrap_dir/yay_pkglist)

if [ "$run_mkinitcpio" = true ]; then
    action_msg "Regenerating initramfs"
    sudo mkinitcpio -P
fi

action_msg "Enabling systemd services"
sudo systemctl enable NetworkManager
sudo systemctl enable thermald
sudo systemctl enable bluetooth

action_msg "Building bat cache"
bat cache --build

info_msg "Checking for Rust compiler"
if ! command -v rustc &>/dev/null; then
    action_msg "Installing Rust"
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
fi

info_msg "Checking for rust-analyzer"
if ! rustup component list --installed | grep "rust-analyzer" &>/dev/null; then
    action_msg "Installing rust-analyzer"
    rustup component add rust-analyzer
fi

zsh "${bootstrap_dir}/bootstrap_zsh"

